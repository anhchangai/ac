#define _CRT_SECURE_NO_WARNINGS

#include <iostream> 
using namespace std;
int A[7] = {1,3,3,5,7,8,12}; 
int B1[5] ; 
int B2[5] ; 
void swap(int i , int j )
{
	int temp = A[j] ; 
	A[j] = A[i] ; 
	A[i] = temp ; 
}
int partition(int s , int e)
{
	int pValue = A[s] ;
	int i = s + 1 ; 
	int j = e ; 
	while(i<=j)
	{
		if(A[i]<=A[s] && i <= e)
		{
			i++ ; 
		}
		else if(A[j]>=A[s] && j > 0)
		{
			j-- ; 
		}
		else 
		{
			if(i<j)
			{
				swap(i,j) ;
				i++ ; 
				j-- ; 
			}
		}
	}
	swap(s,j) ; 
	return j ; 
}
int BinarySearch(int start , int end, int key)
{
	while(start <= end)
	{
		int mid = start + (end-start) / 2 ; 
		if(A[mid] == key)
		{return mid ; }
		else if ( A[mid] > key) {
			end = mid - 1 ; 
		} 
		else {
			start = mid + 1 ; 
		}
	}
	return -1 ; 
}

int main() {
	quickSort(0,8,5) ; 
	return 0 ; 
}


#define _CRT_SECURE_NO_WARNINGS

#include <iostream> 
using namespace std;
int A[8] = {4,3,6,8,2,7,5,1}; 
int B1[5] ; 
int B2[5] ; 

void merge(int s , int e)
{
	int m = (s+e)/2 ; 
	int len1 = 0 ; 
	for(int i = s ; i <= m ; i++ )
	{
		B1[len1++]  = A[i] ; 
	}
	int len2 = 0 ; 
	for(int i = m+1 ; i <= e ; i++ )
	{
		B2[len2++]  = A[i] ; 
	}
	int i = s , i1 = 0 , i2 = 0 ;
	while(i1 < len1 && i2 < len2)
	{
		if(B1[i1] < B2[i2]) A[i++] = B1[i1++] ; 
		else A[i++] = B2[i2++] ; 
	}
	while(i1<len1)
		A[i++] = B1[i1++] ; 
	while(i2<len2)
		A[i++] = B2[i2++] ; 
}
void mergeSort(int start , int end)
{
	if(start < end)
	{
		int mid = (start+end)/2 ; 
		mergeSort(start,mid);
		mergeSort(mid+1,end) ; 
		merge(start,end) ; 
	}
}

int main() {
	mergeSort(0,7) ; 
	return 0 ; 
}


#define _CRT_SECURE_NO_WARNINGS

#include <iostream> 
using namespace std;
int A[9] = {1,3,3,5,4,2,8,7,9}; 
int B1[5] ; 
int B2[5] ; 
void swap(int i , int j )
{
	int temp = A[j] ; 
	A[j] = A[i] ; 
	A[i] = temp ; 
}
int partition(int s , int e)
{
	int pValue = A[s] ;
	int i = s + 1 ; 
	int j = e ; 
	while(i<=j)
	{
		if(A[i]<=A[s] && i <= e)
		{
			i++ ; 
		}
		else if(A[j]>=A[s] && j > 0)
		{
			j-- ; 
		}
		else 
		{
			if(i<j)
			{
				swap(i,j) ;
				i++ ; 
				j-- ; 
			}
		}
	}
	swap(s,j) ; 
	return j ; 
}
void quickSort(int start , int end)
{
	if(start < end)
	{
		int pivot = partition(start,end) ; 
		quickSort(start,pivot-1);
		quickSort(pivot+1,end) ; 
	}
}

int main() {
	quickSort(0,8) ; 
	return 0 ; 
}
